*******************************************
Season -1 JAVA 
Day 1 - 5th September  - Tuesday
*******************************************


JAVA + Selenium 


1996 - Sun Micro systems 

now - Oracle 


Features of Java : 

1. Simple 

- syntax is based/similar to c++ 

- removed many confusing or rarely used concepts/features like
explicit pointers , operator overloading 

operators 
+ - * / %

2 + 5 = 7

+ for power 

2 + 5 = 32

- Automatic Garbage Collector

--------------------------------------------------
2. OO(Object Oriented) Programming 

POP Procedure /Functional Programming languages 

OOP is a methodology that simplifies s/w development and maintenance
using some concepts/rules 

- Object
- class
- Polymorphism
- Encapsulation
- Inheritance
- Abstraction

-------------------------------------------------
3. Robust 

- Java uses Strong memory management 
- No pointers ==> avoid security problems
- Automatic Garbage Collector (unwanted memory is deallocated)
- Exception Handling and Type Checking Mechanism 

int i=10;

String j="FLM";

int k=i+j;  ==> error 

-------------------------------------------------

4. Secure :


--------------------------------------------------
5. Platform Independent

OS 

--------------------------------------------------
6. Architectural Netural


Architecture = Micro Processor + RAM 


--------------------------------------------------
7. Portable 

IBM

Apple

Solaris


--------------------------------------------------------------------

How to Install jdk :


jdk 8 or jdk 11 (is preferred)

download below file

jdk-11.0.20_windows-x64_bin.exe

to check jdk installed or not 
go to below loaction

C:\Program Files\Java\jdk-11


*******************************************
Season -1 JAVA 
Day 2 - 6th September  - Wednesday
*******************************************


Configuration of jdk : 

Environment Variables 

JAVA_HOME 

C:\Program Files\Java\jdk-11

path 

C:\Program Files\Java\jdk-11\bin

C:\Users\Riyaz>java -version
java version "11.0.20" 2023-07-18 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.20+9-LTS-256)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.20+9-LTS-256, mixed mode)

----------------------------------------------------------------------------


				
									jdk
								
								
								
								
				lib					bin/tools					jre		


lib : Library 

predefined stuff created by Java Communities


								lib
							
								|
							collection of jars ( ~ to compressd zip folder)
							
								|
							Collection of packages ( ~ to folders)
								|
					------------------------------------			
					|									|			
				Classes								Interfaces
					|									|
			---------------						-----------------
			|			   |                    |				 |
		variables		methods			Constants/Fields	Abstract methods				
							
							
							
							
bin / tools :


to compile a java program 

javac 

syntax :

javac FileName.java


to excute a compiled java program :

java 

syntax :

java FileName 

--------------------------------------------------------------
							
JRE : Java Runtime Environment
							
							jvm (java virtual machine)
							
							
							
			CLSS 				EE								GC
			
			
						Interpreter		JIT					Mark		Sweep
										compiler


CLSS : Class Loader Subsystem 			
							
- Loading
- Linking
- Initialization


*******************************************
Season -1 JAVA 
Day 3 - 7th September  - Thursday
*******************************************
							
EE (Execution Engine):

							
Interpreter : BC to MC 
byte code to machine code

and also execute the code line by line 						
							
							
JIT (Just In time) compiler	: 

looping ==> to give performance 
for , while , etc .. 


------------------------------------
Garbage Collector

for Memory deallocation

System.gc();
Runtime.gc();
						

---------------------------------------
---------------------------------------
JAVA Memory Blocks 

1. Class Area / Method Area

- .class File (Programs)
- Static Variables
- Static Methods 

2. Heap Area (dynamic memory allocation)

- Objects 
- Arrays


3. Java Stack Area

- Local declarations / Local Variables
- expressions 

int x=10,y=20;

x+y ==> 30 

- current running logic /code 

4. String constant pool Area (SCPA)

only string literals 

String str="FLM";


-----------------------------------------
Structure of Java Programs

4 Sections 

1. Documentation Section

2. Package Section

3. Import Section

4. Class/Interface Section


---------------------------------------
1. Documentation Section
---------------------------------------

comments 

single line comment :

// kjhkjhkjh

multiline comment : 

/*  kjhkjhkjhkj

hkjhjhjkhkjh

kjgkjhkjhkjhkj */

---------------------------
2. Package Section
---------------------------

Pacakage is similar to folder 

logical grouping 


syntax : 

package package-name;

------------------------
3. Import Section
------------------------


				|
							Collection of packages ( ~ to folders) (java.util)
								|
					------------------------------------			
					|									|			
				Classes	(Scanner)							Interfaces
					|									|
			---------------						-----------------
			|			   |                    |				 |
		variables		methods			Constants/Fields	Abstract methods	

						nextInt()



import packagename.*;  ==>not preferred 
import packagename.ClassName; gives more readability 
import static package-name.classname.*;
 

java.lang is a default package in java 

there is no need of import 
							

*******************************************
Season -1 JAVA 
Day 4 - 8th September  - Friday
*******************************************
								
-------------------------------							
4. Class/Interface Section	
-------------------------------			
				

access-specifier access-modifier class ClassName
{

//variables

//methods 

}				
				
access-specifier or access label or visibility


public / private /protected / <default> 	

access-modifier ==> behaviour 

static or final or <default> 


class Sample
{

access-specifier access-modifier return-type methodName(arguments or parameters)
public static void main(String[] args)
{
//local declarations 
//Execuatbale statements 


}

}

			
-------------------------------------
Java Naming Conventions
-------------------------------------


					Collection of packages 
								|
					------------------------------------			
					|									|			
				Classes	(Scanner)							Interfaces
					|									|
			---------------						-----------------
			|			   |                    |				 |
		variables		methods			Constants/Fields	Abstract methods	
				
				
				
packages : all lower case 

package sep8th;

package java.util;

package regression;

package org.openqa.selenium;


---------------------------------

Class / Interface : Title Case 


RamaKrishna  RK 

Hello

VariablesDemo

Scanner

ChromeDriver

----------------------------------------

variables / methods / Abstract methods :   camel case ( LowerCase + Title case)


 x y   
 
 height 
 
 netSalary
 
 costOfItem
 
 noOfLinks
 
 
 Examples of methods :
 
 methods ( 
 
 nextInt( 
 
 getWindowHandle(
 
--------------------------------
Constants/Fields  : All upper case 


PI=3.14 

MAX_LIMIT=10000;



********************************
Variables in Java 
********************************

									Variables
							
							
							
							
			Local					Instance					Static



-> refers to a memory block 

10 + 20 

i=10 j=20

i+j 

-> simplifies the expressions

-> stores ones recall anywhere in program


syntax : 

access-specifier access-modifier datatype variableName ;  Variable Declaration 

access-specifier access-modifier datatype variableName = value ; Variable Declaration  and assignment


int i=10			

-------------------
Local Variable 
-------------------


1. Defintion : 

a variable which is declared inside a method is called Local 

2. When ?

when memory is getting allocated ?

when method is called 

3. where ?

where these variables are getting 				
				
Java Stack Area 

4. calling style 

just variable name

5. scope or life time 

till the end of method 	or within that method 			
				
				
Note : 

for Local Variables , it is the responsbility of developer/programmer to initialize some value 

VariablesDemo1.java:14: error: variable y might not have been initialized
System.out.println(y);
                   ^			
				

************************************************
Manual Testing Resume and Interview Preparation
Day  - 9th September  - Saturday
************************************************
					
For Freshers :

Manual Testing :   put 2 projects 

-> Adactin Hotel ( 2 or 3 months)

https://adactinhotelapp.com/

https://adactinhotelapp.com/HotelAppBuild2/


-> open cart (2 or 3 months )

https://demo.opencart.com/


Automation (Manual + Selenium ) : 	


	flmtechteam.testing@frontlinesedutech.com

https://www.tillys.com/


************************************************
Java Season - 1
Day  - 11th September  - Monday 
************************************************
	
1. Defintion : 


2. When ?

when memory is getting allocated ?


3. where ?

where these variables are getting 			
				

4. calling style 


5. scope or life time 
				
-------------------------------------------
Instance Variable or non-static variable	
--------------------------------------------			
1. Defintion : 

variables which are declared inside a class but outside of method 

2. When ?

when memory is getting allocated ?

only when you create an instance / object of that class 

how to create an instance or object ?

ClassName objectName=new ClassName();


3. where ?

where these variables are getting 	

in Heap Area 		
				

4. calling style 


objectName.variableName;



5. scope or life time 				
		

till the last usage of object in the program 		

-------------------------------------------
Static variable	
--------------------------------------------
	
1. Defintion : 

variables which are declared inside a class but outside of method having keyword static 

2. When ?

when memory is getting allocated ?

during class loading 


3. where ?

where these variables are getting 		

Class Area /Method Area 	
				

4. calling style 

ClassName.variableName;


5. scope or life time 

till the end of program 

---------------------------------------------
Data Types in Java :

Java is Strongly typed language


1996 

				8 4 2 1 
	  
3     0 0 0 0 	0 0 1 1 

	  0 0 0 0	0 0 0 0		0 0 0 0		0 0 1 1
	  
	  
	  
	  
								Data Types in Java
								
								
				primitive	(8)	`									non-primitive				
								
boolean
char
byte
short
int
long
float
double 


************************************************
Java Season - 1
Day 6  - 12th September  - Tuesday 
************************************************
	
								
How to download eclipse ?

eclipse is an IDE (Integrated Development Environment)

IDE's like eclipse , Intelli J Idea , Vs code , net beans etc ..								

https://www.eclipse.org/downloads/

Click on "Download Packages " link 

under "MORE DOWNLOADS" 

click on "Eclipse 2021-09 (4.21)"

under "Eclipse IDE for Enterprise Java and Web Developers" 

click on "Windows x86_64"								
								
								

************************************************
Java Season - 1
Day 7  - 13th September  - Wednesday 
************************************************

								
Data Types in Java								


Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	Type mismatch: cannot convert from int to byte
	Type mismatch: cannot convert from int to short

	at sep13th.DataTypesDemo1.main(DataTypesDemo1.java:9)

Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	The literal 2147483648 of type int is out of range 

	at sep13th.DataTypesDemo1.main(DataTypesDemo1.java:13)
----------------------------------------------
Methods in Java 
----------------------------------------------

Method :

a set of statements or instructions 

need of methods : 

- resusabilty 
- reduces code redundancy 
- increases code clarity 
- code debugging becomes easy 


syntax :


access-specifier access-modifier return-type methodName(parameters or arguments)
{
//local declarations
//statements

return statement ; if return-type is void no need of return satement

}




								Methods in Java
								
								
					Instance 					Static
						or
					Non-static	
								
Non-Static Methods 								
								
1. Defintion : 

method defined or declared without static keyword 

<default> , abstract , transient , volatile etc ..

2. When ?

when memory is getting allocated ?

creation of object 


3. where ?

where these variables are getting 	

Heap Area 		
				

4. calling style 

objectName.methodName();


5. scope or life time 								
								
till last usage of object 

???????????????????????????????

Write a Java Program to calcuate Simple Interest 

using methods concept 

??????????????????????????????????								
								
************************************************
Java Season - 1
Day 8  - 14th September  - Thursday 
************************************************								
								
Static :

								
1. Defintion : 

method defined or declared with static keyword 


2. When ?

when memory is getting allocated ?

during .class file loading 

3. where ?

where these variables are getting 	

Class Area /Method Area 		
				

4. calling style 

ClassName.methodName();


5. scope or life time 								
								
till the end of program 


====================================
OOP Object Oriented Programming

POP Procedure oriented programing ( c , COBOL etc ) 							
								
Object 

Class 

Encapsulation

Polymorphism

Inheritance

Abstraction	

Object : 

anything that exits is an object 

3 characteristics :

State : data or attributes that represents an object 

variables

Behaviour : actions or tasks that object can perform

methods 

Identity : unique id used by JVM to identify object 


---------------------------------
Class 

blueprint or template from which you can create an object 


----------------------------------
Object Creation Technique 
----------------------------------

1. using new operator


	ClassName objectName=new ClassName();
	

2. using static factory method 

	ClassName objectName=ClassName.methodName();
	
3. using non-static factory method

will be used in case of dependency of a object of some class on another class 

ClassName1
	methodName : object of ClassName2
	
ClassName2 

		ClassName1 object1=new ClassName1();
		ClassName2 object2=object1.methodName();
		
XSSFWorkbook

	getSheet(): object of XSSFSheet

XSSFSheet		

		XSSFWorkbook wb=new XSSFWorkbook();
		XSSFSheet ws=wb.getSheet();

4. using clone method 

5. using String Literals 

String s1="FLM";

6. using deserialization 
 (no syntax )
 used by JVM to create object 

	
								
************************************************
Java Season - 1
Day 9  - 15th September  - Friday 
************************************************	

Encapsulation : 

Encapsulation in Java is a process of wrapping code and data together into a single unit,
 for example, a capsule which is mixed of several medicines.


Encapsulation = Data hiding + Abstraction	


The field Bank.balance is not visible

For Tightly Encapsulation , we can use access-specifier as private 

if you make variables private only that class method can use it 

then if you want to access the private variables of a class , 
create a public methods in that class and retrive them using proper validation

//getters 

methods having prefix get 

these are used to retrive data or variables 


//setters 			

methods having prefix set 

these are used to modify or alter data or variables		
--------------------------------
this keyword
--------------------------------

if we have local varibales same as intance variables then local variables dominates
 to overcome this problem , we have keyword "this"  in java
 
 this :
 
 is keyword cum operator which is used for current calling object reference
 
************************************************
Java Season - 1
Day 10  - 16th September  - Saturday 
************************************************	

------------------
Polymorphism
------------------

Poly means many

morph means forms 

Exception in thread "main" java.lang.Error: Unresolved compilation problem: 
	The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

	at sep16th.SumDemo.main(SumDemo.java:12)
	
The method add(int, int) in the type Sum is not applicable for the arguments (long, long)

---------------------
without Polymorphism

public void add(int x,int y)
	{
		System.out.println("Sum is "+(x+y));
	}
	
	public void addDouble(double x,double y)
	{
		System.out.println("Sum is "+(x+y));
	}

	public void addLong(long x,long y)
	{
		System.out.println("Sum is "+(x+y));
	}
	
-----------------------------------------

with polymorphism

	public void add(int x,int y)
	{
		System.out.println("Sum is "+(x+y));
	}
	
	public void add(double x,double y)
	{
		System.out.println("Sum is "+(x+y));
	}

	public void add(long x,long y)
	{
		System.out.println("Sum is "+(x+y));
	}
	
---------------------------------------------

										
										
										
									Polymorphism



				Static										Dynamic    
				 or											or
				Compile time								Runtime
				 or											 or
				Early Binding								Late Binding
				
				
binding means mapping or linking 

the caller and called method ,

In Static polymorphism or method overloading

binding will happen during compile time , 				
										
Static Polymorphism :

can be achived by means by 

Operator Overloading  (not encourage or not supprorted in java) 

Method Overloading 	 									
										
Dynamic Polymorphism : 

can be achived by means by 

method overiding (this  will be discussed after inhertance topic)										
										
----------------------------
Method Overloading 
______________________________


method signature 

methodname + Paramaters / arguments

in Method Overloading in same class 

we will have same method name and with different signatures 


Method Overloading  -- different data types 

					-- change in no of arguments
					
					-- change in order of arguments (not prefered)
					
					
*****************
PrintStream Class  ==> java.io 

4 print methods 

println() : this will print and takes the cursor to new line 

print(): this will print and stays cursor in same line 

*
* * 
* * *
* * * *
* * * * *

5 5 5 5 5 
4 4 4 4
3 3 3
2 2
1
 
printf() : from previous lang 
printf(String, Object...)



format()					


______________________________________

git repo for programs 


************************************************
Java Season - 1
Day 11  - 20th September  - Wednesday 
************************************************	

git repo for programs 

https://github.com/flm31stjuly/JavaSeasons

????????????????????????????????????????????

use method overloading concept for below requirment


2,10,1869 - > 02-10-1869

1,1,500 -> 01-01-0500

????????????????????????????????????????????

-----------------
Constructor : 

def : it's method having same name as class name 

rules of constructor :

1) Constructor name should be same class name (case senstive)
2) Constructor shouldn't have return-type 
if return-type is mentioned .then what ?
then comlpiler will treat as normal method 
3) Constructor shouldn't have access-modifier
if access-modifier is specified , then compilation error

Illegal modifier for the constructor in type Sample; only public, protected & private are permitted


									Constructor
								
								
					default constructor					parameterized constructor			
								
Constructor Overloading :

							
************************************************
Java Season - 1
Day 12   - 21st September  - Thursday 
************************************************


--------------------------
3.Inheritance
--------------------------


class B extends A 

1. Single or Simple 
2. MultiLevel
3. Hiererichal 
4. Multiple
5. Hybrid

Marks extends Student

child		   Parent
derived		   base
							
************************************************
Java Season - 1
Day 13   - 22nd September  - Friday 
************************************************


Java doesn't allow Multiple Inheritance for classes

public class C extends A,B{

}


------------------------
Method Overiding
------------------------

method signature 

methodname + Paramaters / arguments


methods having same signature  in two different classes having relationship 

******************************************
Java Season - 1
Day 14   - 23rd  September  - Saturday 
******************************************

--------------------
4. Abstraction
--------------------

Encapsulation = Data Hiding + Abstraction 

								Abstraction
								
								
								
			Abstract class						Interface
			
			( 0 to 100 % )						100 % 
			
			

abstract methods : 

syntax :

access-specifier abstract return-type methodName(arguments); ==> idea and no implementation 


Note : 

for abstract class we Cannot instantiate/create objects 

			
	Interface : ( 100 % abstraction)

constant / fields and abstract methods 


	
Methods :

1) what is the arguments that method is taking 
2) what is the return-type 
3) what does this method do ?						






										
										
										
										
										